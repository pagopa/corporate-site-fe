trigger: none
pr: none

name: $(Year:yy).$(Month).$(DayOfMonth).$(BuildID)-$(SourceBranchName)

parameters:
  - name: environment
    displayName: Target Environment
    type: string
    default: prod
    values:
      - uat
      - prod

# variables set on azdevops to avoid circular dependency warning
# $(BLOB_CONTAINER_NAME)
variables:
  AgentImage: "ubuntu-latest"
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn
  ${{ if eq(parameters['environment'], 'uat') }}:
    AZURE_SUBSCRIPTION: $(UAT_AZURE_SUBSCRIPTION)
    STORAGE_ACCOUNT_NAME: $(UAT_STORAGE_ACCOUNT_NAME)
    PROFILE_CDN_NAME: $(UAT_PROFILE_CDN_NAME)
    ENDPOINT_NAME: $(UAT_ENDPOINT_NAME)
    RESOURCE_GROUP_NAME: $(UAT_RESOURCE_GROUP_NAME)
    BACKEND_BASE_URL: $(UAT_BACKEND_BASE_URL)
    FRONTEND_PASSWORD: $(UAT_FRONTEND_PASSWORD)
    FRONTEND_BASE_URL: $(UAT_FRONTEND_BASE_URL)
    AGENT_POOL: "scorp-uat-linux"
    ENVIRONMENT: 'uat'
  ${{ if eq(parameters['environment'], 'prod') }}:
    AZURE_SUBSCRIPTION: $(PROD_AZURE_SUBSCRIPTION)
    STORAGE_ACCOUNT_NAME: $(PROD_STORAGE_ACCOUNT_NAME)
    PROFILE_CDN_NAME: $(PROD_PROFILE_CDN_NAME)
    ENDPOINT_NAME: $(PROD_ENDPOINT_NAME)
    RESOURCE_GROUP_NAME: $(PROD_RESOURCE_GROUP_NAME)
    BACKEND_BASE_URL: $(PROD_BACKEND_BASE_URL)
    FRONTEND_PASSWORD: $(PROD_FRONTEND_PASSWORD)
    FRONTEND_BASE_URL: $(PROD_FRONTEND_BASE_URL)
    AGENT_POOL: "scorp-prod-linux"
    ENVIRONMENT: 'prod'

# schedules:
# - cron: '0 * * * *'
#   displayName: 'Deploy every hour'
#   branches:
#     include:
#     - main
#   always: true 

pool:
  name: $(AGENT_POOL)

stages:
- stage: 'Build'
  displayName: 'Build'
  jobs:
  - job: 'Build'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: "14.x"
      displayName: "Install Node.js"
    # - task: Cache@2
    #   inputs:
    #     key: '"yarn" | "$(Agent.OS)" | yarn.lock'
    #     restoreKeys: |
    #       yarn | "$(Agent.OS)"
    #     path: $(YARN_CACHE_FOLDER)
    #   displayName: Cache Yarn
    - script: |
        npm install -g yarn
      displayName: "Install Yarn"
    - script: |
        yarn install
      displayName: "Install dependencies"
    - script: |
        yarn clean && yarn build
      displayName: "Gatsby build"
    - script: |
        find . -type f | wc -l 
        ls -la $(Build.SourcesDirectory)/public
      displayName: 'Check Site'
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.SourcesDirectory)/public'
        artifact: 'WebApp'
        publishLocation: 'pipeline'

- stage: 'Deploy_to_${{parameters.environment}}'
  dependsOn: ['Build']
  jobs:
  - job: 'Deploy'
    pool:
      vmImage: $(AgentImage)
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'WebApp'
        targetPath: '$(Build.SourcesDirectory)/public'
    - task: AzureCLI@1
      displayName: 'Sync Storage'
      inputs:
        azureSubscription: '$(AZURE_SUBSCRIPTION)'
        scriptLocation: inlineScript
        inlineScript: |
          az storage blob sync --container '$web' --account-name $(STORAGE_ACCOUNT_NAME) -s "$(Build.SourcesDirectory)/public"
    - task: AzureCLI@1
      displayName: 'Purge CDN'
      inputs:
        azureSubscription: '$(AZURE_SUBSCRIPTION)'
        scriptLocation: inlineScript
        inlineScript: |
          az cdn endpoint purge -g $(RESOURCE_GROUP_NAME) -n $(ENDPOINT_NAME) --profile-name $(PROFILE_CDN_NAME) --content-paths "/*" --no-wait
    - task: AzureCLI@1
      displayName: 'Sync Storage Prod'
      condition: eq(variables['ENVIRONMENT'], 'prod')
      inputs:
        azureSubscription: '$(AZURE_SUBSCRIPTION)'
        scriptLocation: inlineScript
        inlineScript: |
          az account set -s "ORG"
          az storage blob sync --container '$web' --account-name sitecorporatepagopait -s "$(Build.SourcesDirectory)/public"
    - task: AzureCLI@1
      displayName: 'Purge CDN Prod'
      condition: eq(variables['ENVIRONMENT'], 'prod')
      inputs:
        azureSubscription: '$(AZURE_SUBSCRIPTION)'
        scriptLocation: inlineScript
        inlineScript: |
          az account set -s "ORG"
          az cdn endpoint purge -g static-websites -n wwwpagopait --profile-name staticwebsites --content-paths "/*" --no-wait
